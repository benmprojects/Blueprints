blueprint:
  name: "HASP p[x].b[y] displays a toggle button"
  description: |

    # Description

    Press a button on the HASP to toggle the state of an entity.  The button colors will change in response to the on/off state of the selected entity.

    ![Preview](https://github.com/HASwitchPlate/Blueprints/raw/main/Images/hasp_Display_Toggle.gif?raw=true)

    ## Examples

    <details>

    ### Toggle play/pause on a media player

    **Entity to toggle:** A media player that supports play and pause commands
    **Entity state to be considered "on":** `playing`
    **Service call to turn "on":** `media_player.media_play`
    **Service call to turn "off":** `media_player.media_pause`
    **Text to display when entity is "on":** ' Pause'
    **Text to display when entity is "off":** ' Play'

    ### Lock or unlock a door

    **Entity to toggle:** A lock that supports lock and unlock commands
    **Entity state to be considered "on":** `locked`
    **Service call to turn "on":** `lock.lock`
    **Service call to turn "off":** `lock.unlock`
    **Text to display when entity is "on":** ' Locked'
    **Text to display when entity is "off":** ' Unlocked'

    ### Open or close a door

    **Entity to toggle:** A cover entity that supports open and close commands
    **Entity state to be considered "on":** `closed`
    **Service call to turn "on":** `cover.close_cover`
    **Service call to turn "off":** `cover.open_cover`
    **Text to display when entity is "on":** ' Closed'
    **Text to display when entity is "off":** ' Open'

    </details>

    ## HASP Page and Button reference

    <details>

    | Page 0 | Pages 1-3 | Pages 4-5 |
    |--------|-----------|-----------|
    | ![Page 0](https://github.com/HASwitchPlate/Blueprints/raw/main/Images/NextionUI_p0_Init_Screen.png?raw=true) | ![Pages 1-3](https://github.com/HASwitchPlate/Blueprints/raw/main/Images/NextionUI_p1-p3_4buttons.png?raw=true) | ![Pages 4-5](https://github.com/HASwitchPlate/Blueprints/raw/main/Images/NextionUI_p4-p5_3sliders.png?raw=true) |

    | Page 6 | Page 7 | Page 8 |
    |--------|--------|--------|
    | ![Page 6](https://github.com/HASwitchPlate/Blueprints/raw/main/Images/NextionUI_p6_8buttons.png?raw=true) | ![Page 7](https://github.com/HASwitchPlate/Blueprints/raw/main/Images/NextionUI_p7_12buttons.png?raw=true) | ![Page 8](https://github.com/HASwitchPlate/Blueprints/raw/main/Images/NextionUI_p8_5buttons+1slider.png?raw=true) |

    | Page 9 | Page 10 | Page 11 |
    |--------|---------|---------|
    | ![Page 9](https://github.com/HASwitchPlate/Blueprints/raw/main/Images/NextionUI_p9_9buttons.png?raw=true) | ![Page 10](https://github.com/HASwitchPlate/Blueprints/raw/main/Images/NextionUI_p10_5buttons.png?raw=true) | ![Page 11](https://github.com/HASwitchPlate/Blueprints/raw/main/Images/NextionUI_p11_1button.png?raw=true)

    </details>

    ## HASP Font reference

    <details>

    The Nextion display supports monospaced and proportional fonts.  For monospace fonts, the HASP project includes [Consolas](https://docs.microsoft.com/en-us/typography/font-list/consolas) in 4 sizes and [Webdings](https://en.wikipedia.org/wiki/Webdings#Character_set) in 1 size.

    | Number | Font              | Characters per line | Lines per button |
    |--------|-------------------|---------------------|------------------|
    | 0      | Consolas 24 point | 20 characters       | 2 lines          |
    | 1      | Consolas 32 point | 15 characters       | 2 lines          |
    | 2      | Consolas 48 point | 10 characters       | 1 lines          |
    | 3      | Consolas 80 point | 6 characters        | 1 lines          |
    | 4      | Webdings 56 point | 8 characters        | 1 lines          |

    The HASP also includes [Google's "Noto Sans"](https://github.com/googlefonts/noto-fonts) proportional font in 5 sizes.

    | Number | Font                       |
    |--------|----------------------------|
    | 5      | Noto Sans Regular 24 point |
    | 6      | Noto Sans Regular 32 point |
    | 7      | Noto Sans Regular 48 point |
    | 8      | Noto Sans Regular 64 point |
    | 9      | Noto Sans Regular 80 point |
    | 10     | Noto Sans Bold 80 point    |

    ### Icons
    
    Fonts 5-10 also include [1400+ icons which you can copy and paste from here](https://htmlpreview.github.io/?https://github.com/aderusha/HASwitchPlate/blob/master/Documentation/Images/hasp-fontawesome5.html)

    ### Font examples
    
    ![HASP Fonts 0-3](https://github.com/HASwitchPlate/Blueprints/raw/main/Images/NextionUI_Fonts_0-3.png?raw=true) ![HASP Fonts 4-7](https://github.com/HASwitchPlate/Blueprints/raw/main/Images/NextionUI_Fonts_4-7.png?raw=true) ![HASP Fonts 8-10](https://github.com/HASwitchPlate/Blueprints/raw/main/Images/NextionUI_Fonts_8-10.png?raw=true)

    </details>

    ## Nextion color codes

    <details>

    The Nextion environment utilizes RGB 565 encoding.  [Use this handy convertor](https://nodtem66.github.io/nextion-hmi-color-convert/index.html) to select your colors and convert to the RGB 565 format.

    Here are some example colors:

    | Color  | Code  |
    |--------|-------|
    | White  | 65535 |
    | Black  | 0     |
    | Grey   | 25388 |
    | Red    | 63488 |
    | Green  | 2016  |
    | Blue   | 31    |
    | Yellow | 65504 |
    | Orange | 64512 |
    | Brown  | 48192 |

    </details>

  source_url: "https://github.com/HASwitchPlate/Blueprints/blob/main/hasp_Display_Toggle.yaml"
  domain: automation
  input:
    haspconnected:
      name: "HASP Device"
      description: "Select the HASP device"
      selector:
        entity:
          integration: mqtt
          domain: binary_sensor
          device_class: connectivity
    hasppage:
      name: "HASP Page"
      description: "Select the HASP page (1-11) for this toggle.  Refer to the HASP Page and Button reference above."
      default: 1
      selector:
        number:
          min: 1
          max: 11
          mode: slider
    haspbutton:
      name: "HASP Button"
      description: "Select the HASP button for this toggle.  Refer to the HASP Page and Button reference above."
      default: 4
      selector:
        number:
          min: 4
          max: 15
          mode: slider
    entity:
      name: "Entity to toggle"
      description: "Select an entity for this button to toggle"
      selector:
        entity:
    state_on:
      name: 'Entity state to be considered "on"'
      description: 'For most devices, this will be "on".  If the entity state does not match this value (case insensitive), it will be considered "off"'
      default: "on"
      selector:
        text:
    service_on:
      name: 'Service call to turn "on"'
      description: 'Home Assistant service call to turn the entity on.  For most devices, this will be "homeassistant.turn_on"'
      default: "homeassistant.turn_on"
      selector:
        text:
    service_off:
      name: 'Service call to turn "off"'
      description: 'Home Assistant service call to turn the entity off.  For most devices, this will be "homeassistant.turn_off"'
      default: "homeassistant.turn_off"
      selector:
        text:
    text_on:
      name: 'Text to display when entity is "on"'
      description: 'Enter text to be displayed on the button when the selected entity is in the "on" state.'
      default: "Entity on"
      selector:
        text:
    text_off:
      name: 'Text to display when entity is "off"'
      description: 'Enter text to be displayed on the button when the selected entity is in the "off" state.'
      default: "Entity off"
      selector:
        text:
    on_fgcolor:
      name: '"on" foreground color'
      description: 'Text foreground color when the selected entity is "on" in Nextion RGB565 format (see "Nextion color codes" above for reference). -1 = Current theme selected foreground color.'
      default: -1
      selector:
        number:
          min: -1
          max: 65535
          mode: slider
    on_bgcolor:
      name: '"on" background color'
      description: 'Text background color when the selected entity is "on" in Nextion RGB565 format. -1 = Current theme selected background color.'
      default: -1
      selector:
        number:
          min: -1
          max: 65535
          mode: slider
    off_fgcolor:
      name: '"off" foreground color'
      description: 'Text foreground color when the selected entity is "off" in Nextion RGB565 format. -1 = Current theme unselected foreground color.'
      default: -1
      selector:
        number:
          min: -1
          max: 65535
          mode: slider
    off_bgcolor:
      name: '"off" background color'
      description: 'Text background color when the selected entity is "off" in Nextion RGB565 format. -1 = Current theme unselected background color.'
      default: -1
      selector:
        number:
          min: -1
          max: 65535
          mode: slider
    font:
      name: "Font"
      description: "Select the font for the displayed text. Refer to the HASP Font reference above."
      default: 7
      selector:
        number:
          min: 0
          max: 10
          mode: slider
    xcen:
      name: "Text horizontal alignment"
      description: "Horizontal text alignment: 0=Left 1=Center 2=Right"
      default: 1
      selector:
        number:
          min: 0
          max: 2
          mode: slider
    ycen:
      name: "Text vertical alignment"
      description: "Vertical text alignment: 0=Top 1=Center 2=Bottom"
      default: 1
      selector:
        number:
          min: 0
          max: 2
          mode: slider
    wrap:
      name: "Text wrap"
      description: "Enable line-wrapping text if too long to fit in the button."
      default: false
      selector:
        boolean:

mode: parallel
max_exceeded: silent

variables:
  haspconnected: !input haspconnected
  haspname: '{{ haspconnected.split(".")[1].split("_connected")[0] }}'
  hasppage: !input hasppage
  haspbutton: !input haspbutton
  entity: !input entity
  state_on: !input state_on
  service_on: !input service_on
  service_off: !input service_off
  text_on: !input text_on
  text_off: !input text_off
  on_fgcolor: !input on_fgcolor
  on_bgcolor: !input on_bgcolor
  off_fgcolor: !input off_fgcolor
  off_bgcolor: !input off_bgcolor
  font: !input font
  xcen: !input xcen
  ycen: !input ycen
  wrap: !input wrap
  haspobject: '{{ "p[" ~ hasppage ~ "].b[" ~ haspbutton ~ "]" }}'
  commandtopic: '{{ "hasp/" ~ haspname ~ "/command/" ~ haspobject }}'
  jsontopic: '{{ "hasp/" ~ haspname ~ "/state/json" }}'
  jsoncommandtopic: '{{ "hasp/" ~ haspname ~ "/command/json" }}'
  isbr: "{% if wrap == true %}1{% else %}0{% endif %}"
  selectedforegroundcolortopic: '{{ "hasp/" ~ haspname ~ "/light/selectedforegroundcolor/rgb" }}'
  selectedbackgroundcolortopic: '{{ "hasp/" ~ haspname ~ "/light/selectedbackgroundcolor/rgb" }}'
  unselectedforegroundcolortopic: '{{ "hasp/" ~ haspname ~ "/light/unselectedforegroundcolor/rgb" }}'
  unselectedbackgroundcolortopic: '{{ "hasp/" ~ haspname ~ "/light/unselectedbackgroundcolor/rgb" }}'
  selectedfg: >-
    {%- set colorsource="light." ~ haspname ~ "_selected_foreground_color" -%}
    {%- set brightness = state_attr(colorsource, "brightness")|int / 255 -%}
    {%- set red=(state_attr(colorsource, "rgb_color")[0] * brightness)|int -%}
    {%- set green=(state_attr(colorsource, "rgb_color")[1] * brightness)|int -%}
    {%- set blue=(state_attr(colorsource, "rgb_color")[2] * brightness)|int -%}
    {{ (red|bitwise_and(248)*256) + (green|bitwise_and(252)*8) + (blue|bitwise_and(248)/8)|int }}
  selectedbg: >-
    {%- set colorsource="light." ~ haspname ~ "_selected_background_color" -%}
    {%- set brightness = state_attr(colorsource, "brightness")|int / 255 -%}
    {%- set red=(state_attr(colorsource, "rgb_color")[0] * brightness)|int -%}
    {%- set green=(state_attr(colorsource, "rgb_color")[1] * brightness)|int -%}
    {%- set blue=(state_attr(colorsource, "rgb_color")[2] * brightness)|int -%}
    {{ (red|bitwise_and(248)*256) + (green|bitwise_and(252)*8) + (blue|bitwise_and(248)/8)|int }}
  unselectedfg: >-
    {%- set colorsource="light." ~ haspname ~ "_unselected_foreground_color" -%}
    {%- set brightness = state_attr(colorsource, "brightness")|int / 255 -%}
    {%- set red=(state_attr(colorsource, "rgb_color")[0] * brightness)|int -%}
    {%- set green=(state_attr(colorsource, "rgb_color")[1] * brightness)|int -%}
    {%- set blue=(state_attr(colorsource, "rgb_color")[2] * brightness)|int -%}
    {{ (red|bitwise_and(248)*256) + (green|bitwise_and(252)*8) + (blue|bitwise_and(248)/8)|int }}
  unselectedbg: >-
    {%- set colorsource="light." ~ haspname ~ "_unselected_background_color" -%}
    {%- set brightness = state_attr(colorsource, "brightness")|int / 255 -%}
    {%- set red=(state_attr(colorsource, "rgb_color")[0] * brightness)|int -%}
    {%- set green=(state_attr(colorsource, "rgb_color")[1] * brightness)|int -%}
    {%- set blue=(state_attr(colorsource, "rgb_color")[2] * brightness)|int -%}
    {{ (red|bitwise_and(248)*256) + (green|bitwise_and(252)*8) + (blue|bitwise_and(248)/8)|int }}
  entity_state: '{% if states(entity)|lower == state_on %}on{% else %}off{% endif %}'
  toggle_selectedfg: '{% if entity_state == "on" %}{% if on_fgcolor|int >= 0 %}{{on_fgcolor}}{% else %}{{selectedfg}}{% endif %}{% else %}{% if off_fgcolor|int >= 0 %}{{off_fgcolor}}{% else %}{{unselectedfg}}{% endif %}{% endif %}'
  toggle_selectedbg: '{% if entity_state == "on" %}{% if on_bgcolor|int >= 0 %}{{on_bgcolor}}{% else %}{{selectedbg}}{% endif %}{% else %}{% if off_bgcolor|int >= 0 %}{{off_bgcolor}}{% else %}{{unselectedbg}}{% endif %}{% endif %}'
  toggle_unselectedfg: '{% if entity_state != "on" %}{% if on_fgcolor|int >= 0 %}{{on_fgcolor}}{% else %}{{selectedfg}}{% endif %}{% else %}{% if off_fgcolor|int >= 0 %}{{off_fgcolor}}{% else %}{{unselectedfg}}{% endif %}{% endif %}'
  toggle_unselectedbg: '{% if entity_state != "on" %}{% if on_bgcolor|int >= 0 %}{{on_bgcolor}}{% else %}{{selectedbg}}{% endif %}{% else %}{% if off_bgcolor|int >= 0 %}{{off_bgcolor}}{% else %}{{unselectedbg}}{% endif %}{% endif %}'
  text: '{% if entity_state == "on" %}{{text_on}}{% else %}{{text_off}}{% endif %}'
  toggle_service: '{% if entity_state == "on" %}{{service_off}}{% else %}{{service_on}}{% endif %}'
  button_trigger: "ON"

trigger:
  - platform: state
    entity_id: !input haspconnected
    to: "on"
  - platform: state
    entity_id: !input entity
  - platform: homeassistant
    event: start
  - platform: mqtt
    topic: "hasp/+/state/json"
  - platform: mqtt
    topic: "hasp/+/light/selectedforegroundcolor/rgb"
  - platform: mqtt
    topic: "hasp/+/light/selectedbackgroundcolor/rgb"
  - platform: mqtt
    topic: "hasp/+/light/unselectedforegroundcolor/rgb"
  - platform: mqtt
    topic: "hasp/+/light/unselectedbackgroundcolor/rgb"

condition:
  - condition: state
    entity_id: !input haspconnected
    state: "on"

action:
  - choose:
      #########################################################################
      # Apply text and style when "EXECUTE" is pressed by the user
      - conditions:
          - condition: template
            value_template: "{{ trigger is not defined }}"
        sequence:
          - service: mqtt.publish
            data:
              topic: "{{jsoncommandtopic}}"
              payload: >-
                [
                "{{haspobject}}.font={{font}}",
                "{{haspobject}}.xcen={{xcen}}",
                "{{haspobject}}.ycen={{ycen}}",
                "{{haspobject}}.isbr={{isbr}}",
                "{{haspobject}}.pco={{toggle_selectedfg}}",
                "{{haspobject}}.bco={{toggle_selectedbg}}",
                "{{haspobject}}.pco2={{toggle_unselectedfg}}",
                "{{haspobject}}.bco2={{toggle_unselectedbg}}",
                "{{haspobject}}.txt=\"{{text}}\""
                ]
      #########################################################################
      # Update display if our entity has changed state
      - conditions: # Update display if our entity has changed state
          - condition: template
            value_template: '{{ (trigger.platform == "state") and (trigger.entity_id == entity) }}'
        sequence:
          - service: mqtt.publish
            data:
              topic: "{{jsoncommandtopic}}"
              payload: >-
                [
                "{{haspobject}}.pco={{toggle_selectedfg}}",
                "{{haspobject}}.bco={{toggle_selectedbg}}",
                "{{haspobject}}.pco2={{toggle_unselectedfg}}",
                "{{haspobject}}.bco2={{toggle_unselectedbg}}",
                "{{haspobject}}.txt=\"{{text}}\""
                ]
      #########################################################################
      # Catch triggers fired by incoming MQTT messages
      - conditions:
          - condition: template
            value_template: '{{ trigger.platform == "mqtt" }}'
        sequence:
          - choose:
              #########################################################################
              # Catch incoming JSON messages
              - conditions:
                  - condition: template
                    value_template: "{{ (trigger.topic == jsontopic) and trigger.payload_json is defined }}"
                sequence:
                  - choose:
                      #########################################################################
                      # Primary function: Toggle an entity in response to our selected button being pressed ON
                      - conditions:
                          - condition: template
                            value_template: '{{ (trigger.topic == jsontopic) and (trigger.payload_json.event == haspobject) and (trigger.payload_json.value == button_trigger) }}'
                        sequence:
                          - service: '{{toggle_service}}'
                            entity_id: !input entity
              #########################################################################
              # Theme: Apply selected foreground color when it changes
              - conditions:
                  - condition: template
                    value_template: "{{ trigger.topic == selectedforegroundcolortopic }}"
                sequence:
                  - service: mqtt.publish
                    data:
                      topic: "{{commandtopic}}.pco"
                      payload: "{{toggle_selectedfg}}"
              #########################################################################
              # Theme: Apply selected background color on change
              - conditions:
                  - condition: template
                    value_template: "{{ trigger.topic == selectedbackgroundcolortopic }}"
                sequence:
                  - service: mqtt.publish
                    data:
                      topic: "{{commandtopic}}.bco"
                      payload: "{{toggle_selectedbg}}"
              #########################################################################
              # Theme: Apply unselected foreground color on change
              - conditions:
                  - condition: template
                    value_template: "{{ trigger.topic == unselectedforegroundcolortopic }}"
                sequence:
                  - service: mqtt.publish
                    data:
                      topic: "{{commandtopic}}.pco2"
                      payload: "{{toggle_unselectedfg}}"
              #########################################################################
              # Theme: Apply unselected background color on change
              - conditions:
                  - condition: template
                    value_template: "{{ trigger.topic == unselectedbackgroundcolortopic }}"
                sequence:
                  - service: mqtt.publish
                    data:
                      topic: "{{commandtopic}}.bco2"
                      payload: "{{toggle_unselectedbg}}"

    #########################################################################
    # Apply text and style when device is connected or home assistant starts
    default:
      - service: mqtt.publish
        data:
          topic: "{{jsoncommandtopic}}"
          payload: >-
            [
            "{{haspobject}}.font={{font}}",
            "{{haspobject}}.xcen={{xcen}}",
            "{{haspobject}}.ycen={{ycen}}",
            "{{haspobject}}.isbr={{isbr}}",
            "{{haspobject}}.pco={{toggle_selectedfg}}",
            "{{haspobject}}.bco={{toggle_selectedbg}}",
            "{{haspobject}}.pco2={{toggle_unselectedfg}}",
            "{{haspobject}}.bco2={{toggle_unselectedbg}}",
            "{{haspobject}}.txt=\"{{text}}\""
            ]
